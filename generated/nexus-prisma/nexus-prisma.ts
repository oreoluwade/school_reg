/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Department: DepartmentObject
      Faculty: FacultyObject
      Course: CourseObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      CourseConnection: CourseConnectionObject
      CourseEdge: CourseEdgeObject
      AggregateCourse: AggregateCourseObject
      FacultyConnection: FacultyConnectionObject
      FacultyEdge: FacultyEdgeObject
      AggregateFaculty: AggregateFacultyObject
      DepartmentConnection: DepartmentConnectionObject
      DepartmentEdge: DepartmentEdgeObject
      AggregateDepartment: AggregateDepartmentObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      CourseSubscriptionPayload: CourseSubscriptionPayloadObject
      CoursePreviousValues: CoursePreviousValuesObject
      FacultySubscriptionPayload: FacultySubscriptionPayloadObject
      FacultyPreviousValues: FacultyPreviousValuesObject
      DepartmentSubscriptionPayload: DepartmentSubscriptionPayloadObject
      DepartmentPreviousValues: DepartmentPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Department: DepartmentFieldDetails
      Faculty: FacultyFieldDetails
      Course: CourseFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      CourseConnection: CourseConnectionFieldDetails
      CourseEdge: CourseEdgeFieldDetails
      AggregateCourse: AggregateCourseFieldDetails
      FacultyConnection: FacultyConnectionFieldDetails
      FacultyEdge: FacultyEdgeFieldDetails
      AggregateFaculty: AggregateFacultyFieldDetails
      DepartmentConnection: DepartmentConnectionFieldDetails
      DepartmentEdge: DepartmentEdgeFieldDetails
      AggregateDepartment: AggregateDepartmentFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      CourseSubscriptionPayload: CourseSubscriptionPayloadFieldDetails
      CoursePreviousValues: CoursePreviousValuesFieldDetails
      FacultySubscriptionPayload: FacultySubscriptionPayloadFieldDetails
      FacultyPreviousValues: FacultyPreviousValuesFieldDetails
      DepartmentSubscriptionPayload: DepartmentSubscriptionPayloadFieldDetails
      DepartmentPreviousValues: DepartmentPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      DepartmentWhereInput: DepartmentWhereInputInputObject
      FacultyWhereInput: FacultyWhereInputInputObject
      CourseWhereInput: CourseWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      CourseWhereUniqueInput: CourseWhereUniqueInputInputObject
      FacultyWhereUniqueInput: FacultyWhereUniqueInputInputObject
      DepartmentWhereUniqueInput: DepartmentWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      DepartmentCreateOneWithoutStudentsInput: DepartmentCreateOneWithoutStudentsInputInputObject
      DepartmentCreateWithoutStudentsInput: DepartmentCreateWithoutStudentsInputInputObject
      FacultyCreateOneWithoutDepartmentsInput: FacultyCreateOneWithoutDepartmentsInputInputObject
      FacultyCreateWithoutDepartmentsInput: FacultyCreateWithoutDepartmentsInputInputObject
      CourseCreateManyWithoutDepartmentInput: CourseCreateManyWithoutDepartmentInputInputObject
      CourseCreateWithoutDepartmentInput: CourseCreateWithoutDepartmentInputInputObject
      UserCreateManyWithoutCoursesInput: UserCreateManyWithoutCoursesInputInputObject
      UserCreateWithoutCoursesInput: UserCreateWithoutCoursesInputInputObject
      FacultyCreateOneInput: FacultyCreateOneInputInputObject
      FacultyCreateInput: FacultyCreateInputInputObject
      DepartmentCreateManyWithoutFacultyInput: DepartmentCreateManyWithoutFacultyInputInputObject
      DepartmentCreateWithoutFacultyInput: DepartmentCreateWithoutFacultyInputInputObject
      UserCreateManyWithoutDepartmentInput: UserCreateManyWithoutDepartmentInputInputObject
      UserCreateWithoutDepartmentInput: UserCreateWithoutDepartmentInputInputObject
      CourseCreateManyWithoutStudentsInput: CourseCreateManyWithoutStudentsInputInputObject
      CourseCreateWithoutStudentsInput: CourseCreateWithoutStudentsInputInputObject
      DepartmentCreateOneWithoutCoursesInput: DepartmentCreateOneWithoutCoursesInputInputObject
      DepartmentCreateWithoutCoursesInput: DepartmentCreateWithoutCoursesInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      DepartmentUpdateOneWithoutStudentsInput: DepartmentUpdateOneWithoutStudentsInputInputObject
      DepartmentUpdateWithoutStudentsDataInput: DepartmentUpdateWithoutStudentsDataInputInputObject
      FacultyUpdateOneRequiredWithoutDepartmentsInput: FacultyUpdateOneRequiredWithoutDepartmentsInputInputObject
      FacultyUpdateWithoutDepartmentsDataInput: FacultyUpdateWithoutDepartmentsDataInputInputObject
      FacultyUpsertWithoutDepartmentsInput: FacultyUpsertWithoutDepartmentsInputInputObject
      CourseUpdateManyWithoutDepartmentInput: CourseUpdateManyWithoutDepartmentInputInputObject
      CourseUpdateWithWhereUniqueWithoutDepartmentInput: CourseUpdateWithWhereUniqueWithoutDepartmentInputInputObject
      CourseUpdateWithoutDepartmentDataInput: CourseUpdateWithoutDepartmentDataInputInputObject
      UserUpdateManyWithoutCoursesInput: UserUpdateManyWithoutCoursesInputInputObject
      UserUpdateWithWhereUniqueWithoutCoursesInput: UserUpdateWithWhereUniqueWithoutCoursesInputInputObject
      UserUpdateWithoutCoursesDataInput: UserUpdateWithoutCoursesDataInputInputObject
      FacultyUpdateOneInput: FacultyUpdateOneInputInputObject
      FacultyUpdateDataInput: FacultyUpdateDataInputInputObject
      DepartmentUpdateManyWithoutFacultyInput: DepartmentUpdateManyWithoutFacultyInputInputObject
      DepartmentUpdateWithWhereUniqueWithoutFacultyInput: DepartmentUpdateWithWhereUniqueWithoutFacultyInputInputObject
      DepartmentUpdateWithoutFacultyDataInput: DepartmentUpdateWithoutFacultyDataInputInputObject
      UserUpdateManyWithoutDepartmentInput: UserUpdateManyWithoutDepartmentInputInputObject
      UserUpdateWithWhereUniqueWithoutDepartmentInput: UserUpdateWithWhereUniqueWithoutDepartmentInputInputObject
      UserUpdateWithoutDepartmentDataInput: UserUpdateWithoutDepartmentDataInputInputObject
      CourseUpdateManyWithoutStudentsInput: CourseUpdateManyWithoutStudentsInputInputObject
      CourseUpdateWithWhereUniqueWithoutStudentsInput: CourseUpdateWithWhereUniqueWithoutStudentsInputInputObject
      CourseUpdateWithoutStudentsDataInput: CourseUpdateWithoutStudentsDataInputInputObject
      DepartmentUpdateOneRequiredWithoutCoursesInput: DepartmentUpdateOneRequiredWithoutCoursesInputInputObject
      DepartmentUpdateWithoutCoursesDataInput: DepartmentUpdateWithoutCoursesDataInputInputObject
      DepartmentUpsertWithoutCoursesInput: DepartmentUpsertWithoutCoursesInputInputObject
      CourseUpsertWithWhereUniqueWithoutStudentsInput: CourseUpsertWithWhereUniqueWithoutStudentsInputInputObject
      CourseScalarWhereInput: CourseScalarWhereInputInputObject
      CourseUpdateManyWithWhereNestedInput: CourseUpdateManyWithWhereNestedInputInputObject
      CourseUpdateManyDataInput: CourseUpdateManyDataInputInputObject
      UserUpsertWithWhereUniqueWithoutDepartmentInput: UserUpsertWithWhereUniqueWithoutDepartmentInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      DepartmentUpsertWithWhereUniqueWithoutFacultyInput: DepartmentUpsertWithWhereUniqueWithoutFacultyInputInputObject
      DepartmentScalarWhereInput: DepartmentScalarWhereInputInputObject
      DepartmentUpdateManyWithWhereNestedInput: DepartmentUpdateManyWithWhereNestedInputInputObject
      DepartmentUpdateManyDataInput: DepartmentUpdateManyDataInputInputObject
      FacultyUpsertNestedInput: FacultyUpsertNestedInputInputObject
      UserUpsertWithWhereUniqueWithoutCoursesInput: UserUpsertWithWhereUniqueWithoutCoursesInputInputObject
      CourseUpsertWithWhereUniqueWithoutDepartmentInput: CourseUpsertWithWhereUniqueWithoutDepartmentInputInputObject
      DepartmentUpsertWithoutStudentsInput: DepartmentUpsertWithoutStudentsInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      CourseCreateInput: CourseCreateInputInputObject
      CourseUpdateInput: CourseUpdateInputInputObject
      CourseUpdateManyMutationInput: CourseUpdateManyMutationInputInputObject
      FacultyUpdateInput: FacultyUpdateInputInputObject
      FacultyUpdateManyMutationInput: FacultyUpdateManyMutationInputInputObject
      DepartmentCreateInput: DepartmentCreateInputInputObject
      DepartmentUpdateInput: DepartmentUpdateInputInputObject
      DepartmentUpdateManyMutationInput: DepartmentUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      CourseSubscriptionWhereInput: CourseSubscriptionWhereInputInputObject
      FacultySubscriptionWhereInput: FacultySubscriptionWhereInputInputObject
      DepartmentSubscriptionWhereInput: DepartmentSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    DepartmentOrderByInput: DepartmentOrderByInputValues,
    CourseOrderByInput: CourseOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    FacultyOrderByInput: FacultyOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'course', args?: QueryCourseArgs[] | false, alias?: string  } 
  | { name: 'courses', args?: QueryCoursesArgs[] | false, alias?: string  } 
  | { name: 'coursesConnection', args?: QueryCoursesConnectionArgs[] | false, alias?: string  } 
  | { name: 'faculty', args?: QueryFacultyArgs[] | false, alias?: string  } 
  | { name: 'faculties', args?: QueryFacultiesArgs[] | false, alias?: string  } 
  | { name: 'facultiesConnection', args?: QueryFacultiesConnectionArgs[] | false, alias?: string  } 
  | { name: 'department', args?: QueryDepartmentArgs[] | false, alias?: string  } 
  | { name: 'departments', args?: QueryDepartmentsArgs[] | false, alias?: string  } 
  | { name: 'departmentsConnection', args?: QueryDepartmentsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'course'
  | 'courses'
  | 'coursesConnection'
  | 'faculty'
  | 'faculties'
  | 'facultiesConnection'
  | 'department'
  | 'departments'
  | 'departmentsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCourseArgs =
  | 'where'
type QueryCoursesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCoursesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFacultyArgs =
  | 'where'
type QueryFacultiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFacultiesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDepartmentArgs =
  | 'where'
type QueryDepartmentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDepartmentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  course: {
    type: 'Course'
    args: Record<QueryCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CourseWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course | null> | prisma.Course | null
  }
  courses: {
    type: 'Course'
    args: Record<QueryCoursesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CourseWhereInput | null, orderBy?: prisma.CourseOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course[]> | prisma.Course[]
  }
  coursesConnection: {
    type: 'CourseConnection'
    args: Record<QueryCoursesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CourseWhereInput | null, orderBy?: prisma.CourseOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseConnection> | prisma.CourseConnection
  }
  faculty: {
    type: 'Faculty'
    args: Record<QueryFacultyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FacultyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Faculty | null> | prisma.Faculty | null
  }
  faculties: {
    type: 'Faculty'
    args: Record<QueryFacultiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FacultyWhereInput | null, orderBy?: prisma.FacultyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Faculty[]> | prisma.Faculty[]
  }
  facultiesConnection: {
    type: 'FacultyConnection'
    args: Record<QueryFacultiesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FacultyWhereInput | null, orderBy?: prisma.FacultyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacultyConnection> | prisma.FacultyConnection
  }
  department: {
    type: 'Department'
    args: Record<QueryDepartmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: DepartmentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department | null> | prisma.Department | null
  }
  departments: {
    type: 'Department'
    args: Record<QueryDepartmentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DepartmentWhereInput | null, orderBy?: prisma.DepartmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department[]> | prisma.Department[]
  }
  departmentsConnection: {
    type: 'DepartmentConnection'
    args: Record<QueryDepartmentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DepartmentWhereInput | null, orderBy?: prisma.DepartmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DepartmentConnection> | prisma.DepartmentConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'regNo', args?: [] | false, alias?: string  } 
  | { name: 'gender', args?: [] | false, alias?: string  } 
  | { name: 'department', args?: [] | false, alias?: string  } 
  | { name: 'faculty', args?: [] | false, alias?: string  } 
  | { name: 'courses', args?: UserCoursesArgs[] | false, alias?: string  } 
  | { name: 'level', args?: [] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'name'
  | 'email'
  | 'regNo'
  | 'gender'
  | 'department'
  | 'faculty'
  | 'courses'
  | 'level'
  | 'phone'
  | 'address'
  | 'image'


type UserCoursesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  regNo: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  gender: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  department: {
    type: 'Department'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department | null> | prisma.Department | null
  }
  faculty: {
    type: 'Faculty'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Faculty | null> | prisma.Faculty | null
  }
  courses: {
    type: 'Course'
    args: Record<UserCoursesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: CourseWhereInput | null, orderBy?: prisma.CourseOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course[]> | prisma.Course[]
  }
  level: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  phone: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  image: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Department

type DepartmentObject =
  | DepartmentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'faculty', args?: [] | false, alias?: string  } 
  | { name: 'courses', args?: DepartmentCoursesArgs[] | false, alias?: string  } 
  | { name: 'students', args?: DepartmentStudentsArgs[] | false, alias?: string  } 

type DepartmentFields =
  | 'id'
  | 'name'
  | 'faculty'
  | 'courses'
  | 'students'


type DepartmentCoursesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type DepartmentStudentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface DepartmentFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  faculty: {
    type: 'Faculty'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Department">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Faculty> | prisma.Faculty
  }
  courses: {
    type: 'Course'
    args: Record<DepartmentCoursesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Department">,
      args: { where?: CourseWhereInput | null, orderBy?: prisma.CourseOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course[]> | prisma.Course[]
  }
  students: {
    type: 'User'
    args: Record<DepartmentStudentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Department">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
}
  

// Types for Faculty

type FacultyObject =
  | FacultyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'departments', args?: FacultyDepartmentsArgs[] | false, alias?: string  } 

type FacultyFields =
  | 'id'
  | 'name'
  | 'departments'


type FacultyDepartmentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface FacultyFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  departments: {
    type: 'Department'
    args: Record<FacultyDepartmentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Faculty">,
      args: { where?: DepartmentWhereInput | null, orderBy?: prisma.DepartmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department[]> | prisma.Department[]
  }
}
  

// Types for Course

type CourseObject =
  | CourseFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'department', args?: [] | false, alias?: string  } 
  | { name: 'creditUnits', args?: [] | false, alias?: string  } 
  | { name: 'students', args?: CourseStudentsArgs[] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'level', args?: [] | false, alias?: string  } 

type CourseFields =
  | 'id'
  | 'name'
  | 'department'
  | 'creditUnits'
  | 'students'
  | 'description'
  | 'level'


type CourseStudentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CourseFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  department: {
    type: 'Department'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Course">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department> | prisma.Department
  }
  creditUnits: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  students: {
    type: 'User'
    args: Record<CourseStudentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Course">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  level: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CourseConnection

type CourseConnectionObject =
  | CourseConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CourseConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CourseConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CourseEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CourseConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseEdge[]> | prisma.CourseEdge[]
  }
  aggregate: {
    type: 'AggregateCourse'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCourse> | prisma.AggregateCourse
  }
}
  

// Types for CourseEdge

type CourseEdgeObject =
  | CourseEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CourseEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CourseEdgeFieldDetails {
  node: {
    type: 'Course'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course> | prisma.Course
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCourse

type AggregateCourseObject =
  | AggregateCourseFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCourseFields =
  | 'count'



  

export interface AggregateCourseFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FacultyConnection

type FacultyConnectionObject =
  | FacultyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FacultyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FacultyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FacultyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FacultyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FacultyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacultyEdge[]> | prisma.FacultyEdge[]
  }
  aggregate: {
    type: 'AggregateFaculty'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FacultyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFaculty> | prisma.AggregateFaculty
  }
}
  

// Types for FacultyEdge

type FacultyEdgeObject =
  | FacultyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FacultyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FacultyEdgeFieldDetails {
  node: {
    type: 'Faculty'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FacultyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Faculty> | prisma.Faculty
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFaculty

type AggregateFacultyObject =
  | AggregateFacultyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFacultyFields =
  | 'count'



  

export interface AggregateFacultyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DepartmentConnection

type DepartmentConnectionObject =
  | DepartmentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type DepartmentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface DepartmentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DepartmentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'DepartmentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"DepartmentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DepartmentEdge[]> | prisma.DepartmentEdge[]
  }
  aggregate: {
    type: 'AggregateDepartment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DepartmentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateDepartment> | prisma.AggregateDepartment
  }
}
  

// Types for DepartmentEdge

type DepartmentEdgeObject =
  | DepartmentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type DepartmentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface DepartmentEdgeFieldDetails {
  node: {
    type: 'Department'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DepartmentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department> | prisma.Department
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateDepartment

type AggregateDepartmentObject =
  | AggregateDepartmentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateDepartmentFields =
  | 'count'



  

export interface AggregateDepartmentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createCourse', args?: MutationCreateCourseArgs[] | false, alias?: string  } 
  | { name: 'updateCourse', args?: MutationUpdateCourseArgs[] | false, alias?: string  } 
  | { name: 'updateManyCourses', args?: MutationUpdateManyCoursesArgs[] | false, alias?: string  } 
  | { name: 'upsertCourse', args?: MutationUpsertCourseArgs[] | false, alias?: string  } 
  | { name: 'deleteCourse', args?: MutationDeleteCourseArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCourses', args?: MutationDeleteManyCoursesArgs[] | false, alias?: string  } 
  | { name: 'createFaculty', args?: MutationCreateFacultyArgs[] | false, alias?: string  } 
  | { name: 'updateFaculty', args?: MutationUpdateFacultyArgs[] | false, alias?: string  } 
  | { name: 'updateManyFaculties', args?: MutationUpdateManyFacultiesArgs[] | false, alias?: string  } 
  | { name: 'upsertFaculty', args?: MutationUpsertFacultyArgs[] | false, alias?: string  } 
  | { name: 'deleteFaculty', args?: MutationDeleteFacultyArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFaculties', args?: MutationDeleteManyFacultiesArgs[] | false, alias?: string  } 
  | { name: 'createDepartment', args?: MutationCreateDepartmentArgs[] | false, alias?: string  } 
  | { name: 'updateDepartment', args?: MutationUpdateDepartmentArgs[] | false, alias?: string  } 
  | { name: 'updateManyDepartments', args?: MutationUpdateManyDepartmentsArgs[] | false, alias?: string  } 
  | { name: 'upsertDepartment', args?: MutationUpsertDepartmentArgs[] | false, alias?: string  } 
  | { name: 'deleteDepartment', args?: MutationDeleteDepartmentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyDepartments', args?: MutationDeleteManyDepartmentsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createCourse'
  | 'updateCourse'
  | 'updateManyCourses'
  | 'upsertCourse'
  | 'deleteCourse'
  | 'deleteManyCourses'
  | 'createFaculty'
  | 'updateFaculty'
  | 'updateManyFaculties'
  | 'upsertFaculty'
  | 'deleteFaculty'
  | 'deleteManyFaculties'
  | 'createDepartment'
  | 'updateDepartment'
  | 'updateManyDepartments'
  | 'upsertDepartment'
  | 'deleteDepartment'
  | 'deleteManyDepartments'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateCourseArgs =
  | 'data'
type MutationUpdateCourseArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCoursesArgs =
  | 'data'
  | 'where'
type MutationUpsertCourseArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCourseArgs =
  | 'where'
type MutationDeleteManyCoursesArgs =
  | 'where'
type MutationCreateFacultyArgs =
  | 'data'
type MutationUpdateFacultyArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFacultiesArgs =
  | 'data'
  | 'where'
type MutationUpsertFacultyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFacultyArgs =
  | 'where'
type MutationDeleteManyFacultiesArgs =
  | 'where'
type MutationCreateDepartmentArgs =
  | 'data'
type MutationUpdateDepartmentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyDepartmentsArgs =
  | 'data'
  | 'where'
type MutationUpsertDepartmentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteDepartmentArgs =
  | 'where'
type MutationDeleteManyDepartmentsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCourse: {
    type: 'Course'
    args: Record<MutationCreateCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CourseCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course> | prisma.Course
  }
  updateCourse: {
    type: 'Course'
    args: Record<MutationUpdateCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CourseUpdateInput, where: CourseWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course | null> | prisma.Course | null
  }
  updateManyCourses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCoursesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CourseUpdateManyMutationInput, where?: CourseWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCourse: {
    type: 'Course'
    args: Record<MutationUpsertCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CourseWhereUniqueInput, create: CourseCreateInput, update: CourseUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course> | prisma.Course
  }
  deleteCourse: {
    type: 'Course'
    args: Record<MutationDeleteCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CourseWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course | null> | prisma.Course | null
  }
  deleteManyCourses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCoursesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CourseWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFaculty: {
    type: 'Faculty'
    args: Record<MutationCreateFacultyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FacultyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Faculty> | prisma.Faculty
  }
  updateFaculty: {
    type: 'Faculty'
    args: Record<MutationUpdateFacultyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FacultyUpdateInput, where: FacultyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Faculty | null> | prisma.Faculty | null
  }
  updateManyFaculties: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFacultiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FacultyUpdateManyMutationInput, where?: FacultyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFaculty: {
    type: 'Faculty'
    args: Record<MutationUpsertFacultyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FacultyWhereUniqueInput, create: FacultyCreateInput, update: FacultyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Faculty> | prisma.Faculty
  }
  deleteFaculty: {
    type: 'Faculty'
    args: Record<MutationDeleteFacultyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FacultyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Faculty | null> | prisma.Faculty | null
  }
  deleteManyFaculties: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFacultiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FacultyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createDepartment: {
    type: 'Department'
    args: Record<MutationCreateDepartmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DepartmentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department> | prisma.Department
  }
  updateDepartment: {
    type: 'Department'
    args: Record<MutationUpdateDepartmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DepartmentUpdateInput, where: DepartmentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department | null> | prisma.Department | null
  }
  updateManyDepartments: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyDepartmentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DepartmentUpdateManyMutationInput, where?: DepartmentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertDepartment: {
    type: 'Department'
    args: Record<MutationUpsertDepartmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DepartmentWhereUniqueInput, create: DepartmentCreateInput, update: DepartmentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department> | prisma.Department
  }
  deleteDepartment: {
    type: 'Department'
    args: Record<MutationDeleteDepartmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DepartmentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department | null> | prisma.Department | null
  }
  deleteManyDepartments: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyDepartmentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: DepartmentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'course', args?: SubscriptionCourseArgs[] | false, alias?: string  } 
  | { name: 'faculty', args?: SubscriptionFacultyArgs[] | false, alias?: string  } 
  | { name: 'department', args?: SubscriptionDepartmentArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'course'
  | 'faculty'
  | 'department'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionCourseArgs =
  | 'where'
type SubscriptionFacultyArgs =
  | 'where'
type SubscriptionDepartmentArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  course: {
    type: 'CourseSubscriptionPayload'
    args: Record<SubscriptionCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CourseSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseSubscriptionPayload | null> | prisma.CourseSubscriptionPayload | null
  }
  faculty: {
    type: 'FacultySubscriptionPayload'
    args: Record<SubscriptionFacultyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FacultySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacultySubscriptionPayload | null> | prisma.FacultySubscriptionPayload | null
  }
  department: {
    type: 'DepartmentSubscriptionPayload'
    args: Record<SubscriptionDepartmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: DepartmentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DepartmentSubscriptionPayload | null> | prisma.DepartmentSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'regNo', args?: [] | false, alias?: string  } 
  | { name: 'gender', args?: [] | false, alias?: string  } 
  | { name: 'level', args?: [] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'name'
  | 'email'
  | 'regNo'
  | 'gender'
  | 'level'
  | 'phone'
  | 'address'
  | 'image'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  regNo: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  gender: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  level: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  phone: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  image: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CourseSubscriptionPayload

type CourseSubscriptionPayloadObject =
  | CourseSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CourseSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CourseSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Course'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CourseSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course | null> | prisma.Course | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CoursePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CourseSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoursePreviousValues | null> | prisma.CoursePreviousValues | null
  }
}
  

// Types for CoursePreviousValues

type CoursePreviousValuesObject =
  | CoursePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'creditUnits', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'level', args?: [] | false, alias?: string  } 

type CoursePreviousValuesFields =
  | 'id'
  | 'name'
  | 'creditUnits'
  | 'description'
  | 'level'



  

export interface CoursePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  creditUnits: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  level: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FacultySubscriptionPayload

type FacultySubscriptionPayloadObject =
  | FacultySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FacultySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FacultySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FacultySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Faculty'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FacultySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Faculty | null> | prisma.Faculty | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FacultyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FacultySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FacultyPreviousValues | null> | prisma.FacultyPreviousValues | null
  }
}
  

// Types for FacultyPreviousValues

type FacultyPreviousValuesObject =
  | FacultyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type FacultyPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface FacultyPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DepartmentSubscriptionPayload

type DepartmentSubscriptionPayloadObject =
  | DepartmentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type DepartmentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface DepartmentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DepartmentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Department'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DepartmentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Department | null> | prisma.Department | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'DepartmentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DepartmentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DepartmentPreviousValues | null> | prisma.DepartmentPreviousValues | null
  }
}
  

// Types for DepartmentPreviousValues

type DepartmentPreviousValuesObject =
  | DepartmentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type DepartmentPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface DepartmentPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
  regNo?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'regNo', alias?: string  } 
  
export interface DepartmentWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  faculty?: FacultyWhereInput | null
  courses_every?: CourseWhereInput | null
  courses_some?: CourseWhereInput | null
  courses_none?: CourseWhereInput | null
  students_every?: UserWhereInput | null
  students_some?: UserWhereInput | null
  students_none?: UserWhereInput | null
  AND?: DepartmentWhereInput[]
  OR?: DepartmentWhereInput[]
  NOT?: DepartmentWhereInput[]
}
export type DepartmentWhereInputInputObject =
  | Extract<keyof DepartmentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'faculty', alias?: string  } 
  | { name: 'courses_every', alias?: string  } 
  | { name: 'courses_some', alias?: string  } 
  | { name: 'courses_none', alias?: string  } 
  | { name: 'students_every', alias?: string  } 
  | { name: 'students_some', alias?: string  } 
  | { name: 'students_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FacultyWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  departments_every?: DepartmentWhereInput | null
  departments_some?: DepartmentWhereInput | null
  departments_none?: DepartmentWhereInput | null
  AND?: FacultyWhereInput[]
  OR?: FacultyWhereInput[]
  NOT?: FacultyWhereInput[]
}
export type FacultyWhereInputInputObject =
  | Extract<keyof FacultyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'departments_every', alias?: string  } 
  | { name: 'departments_some', alias?: string  } 
  | { name: 'departments_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CourseWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  department?: DepartmentWhereInput | null
  creditUnits?: number | null
  creditUnits_not?: number | null
  creditUnits_in?: number[]
  creditUnits_not_in?: number[]
  creditUnits_lt?: number | null
  creditUnits_lte?: number | null
  creditUnits_gt?: number | null
  creditUnits_gte?: number | null
  students_every?: UserWhereInput | null
  students_some?: UserWhereInput | null
  students_none?: UserWhereInput | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  level?: string | null
  level_not?: string | null
  level_in?: string[]
  level_not_in?: string[]
  level_lt?: string | null
  level_lte?: string | null
  level_gt?: string | null
  level_gte?: string | null
  level_contains?: string | null
  level_not_contains?: string | null
  level_starts_with?: string | null
  level_not_starts_with?: string | null
  level_ends_with?: string | null
  level_not_ends_with?: string | null
  AND?: CourseWhereInput[]
  OR?: CourseWhereInput[]
  NOT?: CourseWhereInput[]
}
export type CourseWhereInputInputObject =
  | Extract<keyof CourseWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'department', alias?: string  } 
  | { name: 'creditUnits', alias?: string  } 
  | { name: 'creditUnits_not', alias?: string  } 
  | { name: 'creditUnits_in', alias?: string  } 
  | { name: 'creditUnits_not_in', alias?: string  } 
  | { name: 'creditUnits_lt', alias?: string  } 
  | { name: 'creditUnits_lte', alias?: string  } 
  | { name: 'creditUnits_gt', alias?: string  } 
  | { name: 'creditUnits_gte', alias?: string  } 
  | { name: 'students_every', alias?: string  } 
  | { name: 'students_some', alias?: string  } 
  | { name: 'students_none', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'level_not', alias?: string  } 
  | { name: 'level_in', alias?: string  } 
  | { name: 'level_not_in', alias?: string  } 
  | { name: 'level_lt', alias?: string  } 
  | { name: 'level_lte', alias?: string  } 
  | { name: 'level_gt', alias?: string  } 
  | { name: 'level_gte', alias?: string  } 
  | { name: 'level_contains', alias?: string  } 
  | { name: 'level_not_contains', alias?: string  } 
  | { name: 'level_starts_with', alias?: string  } 
  | { name: 'level_not_starts_with', alias?: string  } 
  | { name: 'level_ends_with', alias?: string  } 
  | { name: 'level_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  regNo?: string | null
  regNo_not?: string | null
  regNo_in?: string[]
  regNo_not_in?: string[]
  regNo_lt?: string | null
  regNo_lte?: string | null
  regNo_gt?: string | null
  regNo_gte?: string | null
  regNo_contains?: string | null
  regNo_not_contains?: string | null
  regNo_starts_with?: string | null
  regNo_not_starts_with?: string | null
  regNo_ends_with?: string | null
  regNo_not_ends_with?: string | null
  gender?: string | null
  gender_not?: string | null
  gender_in?: string[]
  gender_not_in?: string[]
  gender_lt?: string | null
  gender_lte?: string | null
  gender_gt?: string | null
  gender_gte?: string | null
  gender_contains?: string | null
  gender_not_contains?: string | null
  gender_starts_with?: string | null
  gender_not_starts_with?: string | null
  gender_ends_with?: string | null
  gender_not_ends_with?: string | null
  department?: DepartmentWhereInput | null
  faculty?: FacultyWhereInput | null
  courses_every?: CourseWhereInput | null
  courses_some?: CourseWhereInput | null
  courses_none?: CourseWhereInput | null
  level?: string | null
  level_not?: string | null
  level_in?: string[]
  level_not_in?: string[]
  level_lt?: string | null
  level_lte?: string | null
  level_gt?: string | null
  level_gte?: string | null
  level_contains?: string | null
  level_not_contains?: string | null
  level_starts_with?: string | null
  level_not_starts_with?: string | null
  level_ends_with?: string | null
  level_not_ends_with?: string | null
  phone?: string | null
  phone_not?: string | null
  phone_in?: string[]
  phone_not_in?: string[]
  phone_lt?: string | null
  phone_lte?: string | null
  phone_gt?: string | null
  phone_gte?: string | null
  phone_contains?: string | null
  phone_not_contains?: string | null
  phone_starts_with?: string | null
  phone_not_starts_with?: string | null
  phone_ends_with?: string | null
  phone_not_ends_with?: string | null
  address?: string | null
  address_not?: string | null
  address_in?: string[]
  address_not_in?: string[]
  address_lt?: string | null
  address_lte?: string | null
  address_gt?: string | null
  address_gte?: string | null
  address_contains?: string | null
  address_not_contains?: string | null
  address_starts_with?: string | null
  address_not_starts_with?: string | null
  address_ends_with?: string | null
  address_not_ends_with?: string | null
  image?: string | null
  image_not?: string | null
  image_in?: string[]
  image_not_in?: string[]
  image_lt?: string | null
  image_lte?: string | null
  image_gt?: string | null
  image_gte?: string | null
  image_contains?: string | null
  image_not_contains?: string | null
  image_starts_with?: string | null
  image_not_starts_with?: string | null
  image_ends_with?: string | null
  image_not_ends_with?: string | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'regNo', alias?: string  } 
  | { name: 'regNo_not', alias?: string  } 
  | { name: 'regNo_in', alias?: string  } 
  | { name: 'regNo_not_in', alias?: string  } 
  | { name: 'regNo_lt', alias?: string  } 
  | { name: 'regNo_lte', alias?: string  } 
  | { name: 'regNo_gt', alias?: string  } 
  | { name: 'regNo_gte', alias?: string  } 
  | { name: 'regNo_contains', alias?: string  } 
  | { name: 'regNo_not_contains', alias?: string  } 
  | { name: 'regNo_starts_with', alias?: string  } 
  | { name: 'regNo_not_starts_with', alias?: string  } 
  | { name: 'regNo_ends_with', alias?: string  } 
  | { name: 'regNo_not_ends_with', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'gender_not', alias?: string  } 
  | { name: 'gender_in', alias?: string  } 
  | { name: 'gender_not_in', alias?: string  } 
  | { name: 'gender_lt', alias?: string  } 
  | { name: 'gender_lte', alias?: string  } 
  | { name: 'gender_gt', alias?: string  } 
  | { name: 'gender_gte', alias?: string  } 
  | { name: 'gender_contains', alias?: string  } 
  | { name: 'gender_not_contains', alias?: string  } 
  | { name: 'gender_starts_with', alias?: string  } 
  | { name: 'gender_not_starts_with', alias?: string  } 
  | { name: 'gender_ends_with', alias?: string  } 
  | { name: 'gender_not_ends_with', alias?: string  } 
  | { name: 'department', alias?: string  } 
  | { name: 'faculty', alias?: string  } 
  | { name: 'courses_every', alias?: string  } 
  | { name: 'courses_some', alias?: string  } 
  | { name: 'courses_none', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'level_not', alias?: string  } 
  | { name: 'level_in', alias?: string  } 
  | { name: 'level_not_in', alias?: string  } 
  | { name: 'level_lt', alias?: string  } 
  | { name: 'level_lte', alias?: string  } 
  | { name: 'level_gt', alias?: string  } 
  | { name: 'level_gte', alias?: string  } 
  | { name: 'level_contains', alias?: string  } 
  | { name: 'level_not_contains', alias?: string  } 
  | { name: 'level_starts_with', alias?: string  } 
  | { name: 'level_not_starts_with', alias?: string  } 
  | { name: 'level_ends_with', alias?: string  } 
  | { name: 'level_not_ends_with', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'phone_not', alias?: string  } 
  | { name: 'phone_in', alias?: string  } 
  | { name: 'phone_not_in', alias?: string  } 
  | { name: 'phone_lt', alias?: string  } 
  | { name: 'phone_lte', alias?: string  } 
  | { name: 'phone_gt', alias?: string  } 
  | { name: 'phone_gte', alias?: string  } 
  | { name: 'phone_contains', alias?: string  } 
  | { name: 'phone_not_contains', alias?: string  } 
  | { name: 'phone_starts_with', alias?: string  } 
  | { name: 'phone_not_starts_with', alias?: string  } 
  | { name: 'phone_ends_with', alias?: string  } 
  | { name: 'phone_not_ends_with', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'address_not', alias?: string  } 
  | { name: 'address_in', alias?: string  } 
  | { name: 'address_not_in', alias?: string  } 
  | { name: 'address_lt', alias?: string  } 
  | { name: 'address_lte', alias?: string  } 
  | { name: 'address_gt', alias?: string  } 
  | { name: 'address_gte', alias?: string  } 
  | { name: 'address_contains', alias?: string  } 
  | { name: 'address_not_contains', alias?: string  } 
  | { name: 'address_starts_with', alias?: string  } 
  | { name: 'address_not_starts_with', alias?: string  } 
  | { name: 'address_ends_with', alias?: string  } 
  | { name: 'address_not_ends_with', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'image_not', alias?: string  } 
  | { name: 'image_in', alias?: string  } 
  | { name: 'image_not_in', alias?: string  } 
  | { name: 'image_lt', alias?: string  } 
  | { name: 'image_lte', alias?: string  } 
  | { name: 'image_gt', alias?: string  } 
  | { name: 'image_gte', alias?: string  } 
  | { name: 'image_contains', alias?: string  } 
  | { name: 'image_not_contains', alias?: string  } 
  | { name: 'image_starts_with', alias?: string  } 
  | { name: 'image_not_starts_with', alias?: string  } 
  | { name: 'image_ends_with', alias?: string  } 
  | { name: 'image_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CourseWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type CourseWhereUniqueInputInputObject =
  | Extract<keyof CourseWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface FacultyWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type FacultyWhereUniqueInputInputObject =
  | Extract<keyof FacultyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface DepartmentWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type DepartmentWhereUniqueInputInputObject =
  | Extract<keyof DepartmentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  name?: string
  email?: string
  regNo?: string
  gender?: string | null
  department?: DepartmentCreateOneWithoutStudentsInput | null
  faculty?: FacultyCreateOneInput | null
  courses?: CourseCreateManyWithoutStudentsInput | null
  level?: string | null
  phone?: string | null
  address?: string | null
  image?: string | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'regNo', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'department', alias?: string  } 
  | { name: 'faculty', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'image', alias?: string  } 
  
export interface DepartmentCreateOneWithoutStudentsInput {
  create?: DepartmentCreateWithoutStudentsInput | null
  connect?: DepartmentWhereUniqueInput | null
}
export type DepartmentCreateOneWithoutStudentsInputInputObject =
  | Extract<keyof DepartmentCreateOneWithoutStudentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DepartmentCreateWithoutStudentsInput {
  id?: string | null
  name?: string
  faculty?: FacultyCreateOneWithoutDepartmentsInput
  courses?: CourseCreateManyWithoutDepartmentInput | null
}
export type DepartmentCreateWithoutStudentsInputInputObject =
  | Extract<keyof DepartmentCreateWithoutStudentsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'faculty', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  
export interface FacultyCreateOneWithoutDepartmentsInput {
  create?: FacultyCreateWithoutDepartmentsInput | null
  connect?: FacultyWhereUniqueInput | null
}
export type FacultyCreateOneWithoutDepartmentsInputInputObject =
  | Extract<keyof FacultyCreateOneWithoutDepartmentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FacultyCreateWithoutDepartmentsInput {
  id?: string | null
  name?: string
}
export type FacultyCreateWithoutDepartmentsInputInputObject =
  | Extract<keyof FacultyCreateWithoutDepartmentsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface CourseCreateManyWithoutDepartmentInput {
  create?: CourseCreateWithoutDepartmentInput[]
  connect?: CourseWhereUniqueInput[]
}
export type CourseCreateManyWithoutDepartmentInputInputObject =
  | Extract<keyof CourseCreateManyWithoutDepartmentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseCreateWithoutDepartmentInput {
  id?: string | null
  name?: string
  creditUnits?: number
  students?: UserCreateManyWithoutCoursesInput | null
  description?: string
  level?: string
}
export type CourseCreateWithoutDepartmentInputInputObject =
  | Extract<keyof CourseCreateWithoutDepartmentInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'creditUnits', alias?: string  } 
  | { name: 'students', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'level', alias?: string  } 
  
export interface UserCreateManyWithoutCoursesInput {
  create?: UserCreateWithoutCoursesInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutCoursesInputInputObject =
  | Extract<keyof UserCreateManyWithoutCoursesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutCoursesInput {
  id?: string | null
  name?: string
  email?: string
  regNo?: string
  gender?: string | null
  department?: DepartmentCreateOneWithoutStudentsInput | null
  faculty?: FacultyCreateOneInput | null
  level?: string | null
  phone?: string | null
  address?: string | null
  image?: string | null
}
export type UserCreateWithoutCoursesInputInputObject =
  | Extract<keyof UserCreateWithoutCoursesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'regNo', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'department', alias?: string  } 
  | { name: 'faculty', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'image', alias?: string  } 
  
export interface FacultyCreateOneInput {
  create?: FacultyCreateInput | null
  connect?: FacultyWhereUniqueInput | null
}
export type FacultyCreateOneInputInputObject =
  | Extract<keyof FacultyCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FacultyCreateInput {
  id?: string | null
  name?: string
  departments?: DepartmentCreateManyWithoutFacultyInput | null
}
export type FacultyCreateInputInputObject =
  | Extract<keyof FacultyCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'departments', alias?: string  } 
  
export interface DepartmentCreateManyWithoutFacultyInput {
  create?: DepartmentCreateWithoutFacultyInput[]
  connect?: DepartmentWhereUniqueInput[]
}
export type DepartmentCreateManyWithoutFacultyInputInputObject =
  | Extract<keyof DepartmentCreateManyWithoutFacultyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DepartmentCreateWithoutFacultyInput {
  id?: string | null
  name?: string
  courses?: CourseCreateManyWithoutDepartmentInput | null
  students?: UserCreateManyWithoutDepartmentInput | null
}
export type DepartmentCreateWithoutFacultyInputInputObject =
  | Extract<keyof DepartmentCreateWithoutFacultyInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'students', alias?: string  } 
  
export interface UserCreateManyWithoutDepartmentInput {
  create?: UserCreateWithoutDepartmentInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutDepartmentInputInputObject =
  | Extract<keyof UserCreateManyWithoutDepartmentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutDepartmentInput {
  id?: string | null
  name?: string
  email?: string
  regNo?: string
  gender?: string | null
  faculty?: FacultyCreateOneInput | null
  courses?: CourseCreateManyWithoutStudentsInput | null
  level?: string | null
  phone?: string | null
  address?: string | null
  image?: string | null
}
export type UserCreateWithoutDepartmentInputInputObject =
  | Extract<keyof UserCreateWithoutDepartmentInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'regNo', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'faculty', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'image', alias?: string  } 
  
export interface CourseCreateManyWithoutStudentsInput {
  create?: CourseCreateWithoutStudentsInput[]
  connect?: CourseWhereUniqueInput[]
}
export type CourseCreateManyWithoutStudentsInputInputObject =
  | Extract<keyof CourseCreateManyWithoutStudentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseCreateWithoutStudentsInput {
  id?: string | null
  name?: string
  department?: DepartmentCreateOneWithoutCoursesInput
  creditUnits?: number
  description?: string
  level?: string
}
export type CourseCreateWithoutStudentsInputInputObject =
  | Extract<keyof CourseCreateWithoutStudentsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'department', alias?: string  } 
  | { name: 'creditUnits', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'level', alias?: string  } 
  
export interface DepartmentCreateOneWithoutCoursesInput {
  create?: DepartmentCreateWithoutCoursesInput | null
  connect?: DepartmentWhereUniqueInput | null
}
export type DepartmentCreateOneWithoutCoursesInputInputObject =
  | Extract<keyof DepartmentCreateOneWithoutCoursesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DepartmentCreateWithoutCoursesInput {
  id?: string | null
  name?: string
  faculty?: FacultyCreateOneWithoutDepartmentsInput
  students?: UserCreateManyWithoutDepartmentInput | null
}
export type DepartmentCreateWithoutCoursesInputInputObject =
  | Extract<keyof DepartmentCreateWithoutCoursesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'faculty', alias?: string  } 
  | { name: 'students', alias?: string  } 
  
export interface UserUpdateInput {
  name?: string | null
  email?: string | null
  regNo?: string | null
  gender?: string | null
  department?: DepartmentUpdateOneWithoutStudentsInput | null
  faculty?: FacultyUpdateOneInput | null
  courses?: CourseUpdateManyWithoutStudentsInput | null
  level?: string | null
  phone?: string | null
  address?: string | null
  image?: string | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'regNo', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'department', alias?: string  } 
  | { name: 'faculty', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'image', alias?: string  } 
  
export interface DepartmentUpdateOneWithoutStudentsInput {
  create?: DepartmentCreateWithoutStudentsInput | null
  update?: DepartmentUpdateWithoutStudentsDataInput | null
  upsert?: DepartmentUpsertWithoutStudentsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: DepartmentWhereUniqueInput | null
}
export type DepartmentUpdateOneWithoutStudentsInputInputObject =
  | Extract<keyof DepartmentUpdateOneWithoutStudentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DepartmentUpdateWithoutStudentsDataInput {
  name?: string | null
  faculty?: FacultyUpdateOneRequiredWithoutDepartmentsInput | null
  courses?: CourseUpdateManyWithoutDepartmentInput | null
}
export type DepartmentUpdateWithoutStudentsDataInputInputObject =
  | Extract<keyof DepartmentUpdateWithoutStudentsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'faculty', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  
export interface FacultyUpdateOneRequiredWithoutDepartmentsInput {
  create?: FacultyCreateWithoutDepartmentsInput | null
  update?: FacultyUpdateWithoutDepartmentsDataInput | null
  upsert?: FacultyUpsertWithoutDepartmentsInput | null
  connect?: FacultyWhereUniqueInput | null
}
export type FacultyUpdateOneRequiredWithoutDepartmentsInputInputObject =
  | Extract<keyof FacultyUpdateOneRequiredWithoutDepartmentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FacultyUpdateWithoutDepartmentsDataInput {
  name?: string | null
}
export type FacultyUpdateWithoutDepartmentsDataInputInputObject =
  | Extract<keyof FacultyUpdateWithoutDepartmentsDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface FacultyUpsertWithoutDepartmentsInput {
  update?: FacultyUpdateWithoutDepartmentsDataInput
  create?: FacultyCreateWithoutDepartmentsInput
}
export type FacultyUpsertWithoutDepartmentsInputInputObject =
  | Extract<keyof FacultyUpsertWithoutDepartmentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseUpdateManyWithoutDepartmentInput {
  create?: CourseCreateWithoutDepartmentInput[]
  delete?: CourseWhereUniqueInput[]
  connect?: CourseWhereUniqueInput[]
  set?: CourseWhereUniqueInput[]
  disconnect?: CourseWhereUniqueInput[]
  update?: CourseUpdateWithWhereUniqueWithoutDepartmentInput[]
  upsert?: CourseUpsertWithWhereUniqueWithoutDepartmentInput[]
  deleteMany?: CourseScalarWhereInput[]
  updateMany?: CourseUpdateManyWithWhereNestedInput[]
}
export type CourseUpdateManyWithoutDepartmentInputInputObject =
  | Extract<keyof CourseUpdateManyWithoutDepartmentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CourseUpdateWithWhereUniqueWithoutDepartmentInput {
  where?: CourseWhereUniqueInput
  data?: CourseUpdateWithoutDepartmentDataInput
}
export type CourseUpdateWithWhereUniqueWithoutDepartmentInputInputObject =
  | Extract<keyof CourseUpdateWithWhereUniqueWithoutDepartmentInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CourseUpdateWithoutDepartmentDataInput {
  name?: string | null
  creditUnits?: number | null
  students?: UserUpdateManyWithoutCoursesInput | null
  description?: string | null
  level?: string | null
}
export type CourseUpdateWithoutDepartmentDataInputInputObject =
  | Extract<keyof CourseUpdateWithoutDepartmentDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'creditUnits', alias?: string  } 
  | { name: 'students', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'level', alias?: string  } 
  
export interface UserUpdateManyWithoutCoursesInput {
  create?: UserCreateWithoutCoursesInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutCoursesInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutCoursesInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutCoursesInputInputObject =
  | Extract<keyof UserUpdateManyWithoutCoursesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutCoursesInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutCoursesDataInput
}
export type UserUpdateWithWhereUniqueWithoutCoursesInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutCoursesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutCoursesDataInput {
  name?: string | null
  email?: string | null
  regNo?: string | null
  gender?: string | null
  department?: DepartmentUpdateOneWithoutStudentsInput | null
  faculty?: FacultyUpdateOneInput | null
  level?: string | null
  phone?: string | null
  address?: string | null
  image?: string | null
}
export type UserUpdateWithoutCoursesDataInputInputObject =
  | Extract<keyof UserUpdateWithoutCoursesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'regNo', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'department', alias?: string  } 
  | { name: 'faculty', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'image', alias?: string  } 
  
export interface FacultyUpdateOneInput {
  create?: FacultyCreateInput | null
  update?: FacultyUpdateDataInput | null
  upsert?: FacultyUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: FacultyWhereUniqueInput | null
}
export type FacultyUpdateOneInputInputObject =
  | Extract<keyof FacultyUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FacultyUpdateDataInput {
  name?: string | null
  departments?: DepartmentUpdateManyWithoutFacultyInput | null
}
export type FacultyUpdateDataInputInputObject =
  | Extract<keyof FacultyUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'departments', alias?: string  } 
  
export interface DepartmentUpdateManyWithoutFacultyInput {
  create?: DepartmentCreateWithoutFacultyInput[]
  delete?: DepartmentWhereUniqueInput[]
  connect?: DepartmentWhereUniqueInput[]
  set?: DepartmentWhereUniqueInput[]
  disconnect?: DepartmentWhereUniqueInput[]
  update?: DepartmentUpdateWithWhereUniqueWithoutFacultyInput[]
  upsert?: DepartmentUpsertWithWhereUniqueWithoutFacultyInput[]
  deleteMany?: DepartmentScalarWhereInput[]
  updateMany?: DepartmentUpdateManyWithWhereNestedInput[]
}
export type DepartmentUpdateManyWithoutFacultyInputInputObject =
  | Extract<keyof DepartmentUpdateManyWithoutFacultyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface DepartmentUpdateWithWhereUniqueWithoutFacultyInput {
  where?: DepartmentWhereUniqueInput
  data?: DepartmentUpdateWithoutFacultyDataInput
}
export type DepartmentUpdateWithWhereUniqueWithoutFacultyInputInputObject =
  | Extract<keyof DepartmentUpdateWithWhereUniqueWithoutFacultyInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DepartmentUpdateWithoutFacultyDataInput {
  name?: string | null
  courses?: CourseUpdateManyWithoutDepartmentInput | null
  students?: UserUpdateManyWithoutDepartmentInput | null
}
export type DepartmentUpdateWithoutFacultyDataInputInputObject =
  | Extract<keyof DepartmentUpdateWithoutFacultyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'students', alias?: string  } 
  
export interface UserUpdateManyWithoutDepartmentInput {
  create?: UserCreateWithoutDepartmentInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutDepartmentInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutDepartmentInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutDepartmentInputInputObject =
  | Extract<keyof UserUpdateManyWithoutDepartmentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutDepartmentInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutDepartmentDataInput
}
export type UserUpdateWithWhereUniqueWithoutDepartmentInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutDepartmentInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutDepartmentDataInput {
  name?: string | null
  email?: string | null
  regNo?: string | null
  gender?: string | null
  faculty?: FacultyUpdateOneInput | null
  courses?: CourseUpdateManyWithoutStudentsInput | null
  level?: string | null
  phone?: string | null
  address?: string | null
  image?: string | null
}
export type UserUpdateWithoutDepartmentDataInputInputObject =
  | Extract<keyof UserUpdateWithoutDepartmentDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'regNo', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'faculty', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'image', alias?: string  } 
  
export interface CourseUpdateManyWithoutStudentsInput {
  create?: CourseCreateWithoutStudentsInput[]
  delete?: CourseWhereUniqueInput[]
  connect?: CourseWhereUniqueInput[]
  set?: CourseWhereUniqueInput[]
  disconnect?: CourseWhereUniqueInput[]
  update?: CourseUpdateWithWhereUniqueWithoutStudentsInput[]
  upsert?: CourseUpsertWithWhereUniqueWithoutStudentsInput[]
  deleteMany?: CourseScalarWhereInput[]
  updateMany?: CourseUpdateManyWithWhereNestedInput[]
}
export type CourseUpdateManyWithoutStudentsInputInputObject =
  | Extract<keyof CourseUpdateManyWithoutStudentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CourseUpdateWithWhereUniqueWithoutStudentsInput {
  where?: CourseWhereUniqueInput
  data?: CourseUpdateWithoutStudentsDataInput
}
export type CourseUpdateWithWhereUniqueWithoutStudentsInputInputObject =
  | Extract<keyof CourseUpdateWithWhereUniqueWithoutStudentsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CourseUpdateWithoutStudentsDataInput {
  name?: string | null
  department?: DepartmentUpdateOneRequiredWithoutCoursesInput | null
  creditUnits?: number | null
  description?: string | null
  level?: string | null
}
export type CourseUpdateWithoutStudentsDataInputInputObject =
  | Extract<keyof CourseUpdateWithoutStudentsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'department', alias?: string  } 
  | { name: 'creditUnits', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'level', alias?: string  } 
  
export interface DepartmentUpdateOneRequiredWithoutCoursesInput {
  create?: DepartmentCreateWithoutCoursesInput | null
  update?: DepartmentUpdateWithoutCoursesDataInput | null
  upsert?: DepartmentUpsertWithoutCoursesInput | null
  connect?: DepartmentWhereUniqueInput | null
}
export type DepartmentUpdateOneRequiredWithoutCoursesInputInputObject =
  | Extract<keyof DepartmentUpdateOneRequiredWithoutCoursesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DepartmentUpdateWithoutCoursesDataInput {
  name?: string | null
  faculty?: FacultyUpdateOneRequiredWithoutDepartmentsInput | null
  students?: UserUpdateManyWithoutDepartmentInput | null
}
export type DepartmentUpdateWithoutCoursesDataInputInputObject =
  | Extract<keyof DepartmentUpdateWithoutCoursesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'faculty', alias?: string  } 
  | { name: 'students', alias?: string  } 
  
export interface DepartmentUpsertWithoutCoursesInput {
  update?: DepartmentUpdateWithoutCoursesDataInput
  create?: DepartmentCreateWithoutCoursesInput
}
export type DepartmentUpsertWithoutCoursesInputInputObject =
  | Extract<keyof DepartmentUpsertWithoutCoursesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseUpsertWithWhereUniqueWithoutStudentsInput {
  where?: CourseWhereUniqueInput
  update?: CourseUpdateWithoutStudentsDataInput
  create?: CourseCreateWithoutStudentsInput
}
export type CourseUpsertWithWhereUniqueWithoutStudentsInputInputObject =
  | Extract<keyof CourseUpsertWithWhereUniqueWithoutStudentsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  creditUnits?: number | null
  creditUnits_not?: number | null
  creditUnits_in?: number[]
  creditUnits_not_in?: number[]
  creditUnits_lt?: number | null
  creditUnits_lte?: number | null
  creditUnits_gt?: number | null
  creditUnits_gte?: number | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  level?: string | null
  level_not?: string | null
  level_in?: string[]
  level_not_in?: string[]
  level_lt?: string | null
  level_lte?: string | null
  level_gt?: string | null
  level_gte?: string | null
  level_contains?: string | null
  level_not_contains?: string | null
  level_starts_with?: string | null
  level_not_starts_with?: string | null
  level_ends_with?: string | null
  level_not_ends_with?: string | null
  AND?: CourseScalarWhereInput[]
  OR?: CourseScalarWhereInput[]
  NOT?: CourseScalarWhereInput[]
}
export type CourseScalarWhereInputInputObject =
  | Extract<keyof CourseScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'creditUnits', alias?: string  } 
  | { name: 'creditUnits_not', alias?: string  } 
  | { name: 'creditUnits_in', alias?: string  } 
  | { name: 'creditUnits_not_in', alias?: string  } 
  | { name: 'creditUnits_lt', alias?: string  } 
  | { name: 'creditUnits_lte', alias?: string  } 
  | { name: 'creditUnits_gt', alias?: string  } 
  | { name: 'creditUnits_gte', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'level_not', alias?: string  } 
  | { name: 'level_in', alias?: string  } 
  | { name: 'level_not_in', alias?: string  } 
  | { name: 'level_lt', alias?: string  } 
  | { name: 'level_lte', alias?: string  } 
  | { name: 'level_gt', alias?: string  } 
  | { name: 'level_gte', alias?: string  } 
  | { name: 'level_contains', alias?: string  } 
  | { name: 'level_not_contains', alias?: string  } 
  | { name: 'level_starts_with', alias?: string  } 
  | { name: 'level_not_starts_with', alias?: string  } 
  | { name: 'level_ends_with', alias?: string  } 
  | { name: 'level_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CourseUpdateManyWithWhereNestedInput {
  where?: CourseScalarWhereInput
  data?: CourseUpdateManyDataInput
}
export type CourseUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CourseUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CourseUpdateManyDataInput {
  name?: string | null
  creditUnits?: number | null
  description?: string | null
  level?: string | null
}
export type CourseUpdateManyDataInputInputObject =
  | Extract<keyof CourseUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'creditUnits', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'level', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutDepartmentInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutDepartmentDataInput
  create?: UserCreateWithoutDepartmentInput
}
export type UserUpsertWithWhereUniqueWithoutDepartmentInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutDepartmentInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  regNo?: string | null
  regNo_not?: string | null
  regNo_in?: string[]
  regNo_not_in?: string[]
  regNo_lt?: string | null
  regNo_lte?: string | null
  regNo_gt?: string | null
  regNo_gte?: string | null
  regNo_contains?: string | null
  regNo_not_contains?: string | null
  regNo_starts_with?: string | null
  regNo_not_starts_with?: string | null
  regNo_ends_with?: string | null
  regNo_not_ends_with?: string | null
  gender?: string | null
  gender_not?: string | null
  gender_in?: string[]
  gender_not_in?: string[]
  gender_lt?: string | null
  gender_lte?: string | null
  gender_gt?: string | null
  gender_gte?: string | null
  gender_contains?: string | null
  gender_not_contains?: string | null
  gender_starts_with?: string | null
  gender_not_starts_with?: string | null
  gender_ends_with?: string | null
  gender_not_ends_with?: string | null
  level?: string | null
  level_not?: string | null
  level_in?: string[]
  level_not_in?: string[]
  level_lt?: string | null
  level_lte?: string | null
  level_gt?: string | null
  level_gte?: string | null
  level_contains?: string | null
  level_not_contains?: string | null
  level_starts_with?: string | null
  level_not_starts_with?: string | null
  level_ends_with?: string | null
  level_not_ends_with?: string | null
  phone?: string | null
  phone_not?: string | null
  phone_in?: string[]
  phone_not_in?: string[]
  phone_lt?: string | null
  phone_lte?: string | null
  phone_gt?: string | null
  phone_gte?: string | null
  phone_contains?: string | null
  phone_not_contains?: string | null
  phone_starts_with?: string | null
  phone_not_starts_with?: string | null
  phone_ends_with?: string | null
  phone_not_ends_with?: string | null
  address?: string | null
  address_not?: string | null
  address_in?: string[]
  address_not_in?: string[]
  address_lt?: string | null
  address_lte?: string | null
  address_gt?: string | null
  address_gte?: string | null
  address_contains?: string | null
  address_not_contains?: string | null
  address_starts_with?: string | null
  address_not_starts_with?: string | null
  address_ends_with?: string | null
  address_not_ends_with?: string | null
  image?: string | null
  image_not?: string | null
  image_in?: string[]
  image_not_in?: string[]
  image_lt?: string | null
  image_lte?: string | null
  image_gt?: string | null
  image_gte?: string | null
  image_contains?: string | null
  image_not_contains?: string | null
  image_starts_with?: string | null
  image_not_starts_with?: string | null
  image_ends_with?: string | null
  image_not_ends_with?: string | null
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'regNo', alias?: string  } 
  | { name: 'regNo_not', alias?: string  } 
  | { name: 'regNo_in', alias?: string  } 
  | { name: 'regNo_not_in', alias?: string  } 
  | { name: 'regNo_lt', alias?: string  } 
  | { name: 'regNo_lte', alias?: string  } 
  | { name: 'regNo_gt', alias?: string  } 
  | { name: 'regNo_gte', alias?: string  } 
  | { name: 'regNo_contains', alias?: string  } 
  | { name: 'regNo_not_contains', alias?: string  } 
  | { name: 'regNo_starts_with', alias?: string  } 
  | { name: 'regNo_not_starts_with', alias?: string  } 
  | { name: 'regNo_ends_with', alias?: string  } 
  | { name: 'regNo_not_ends_with', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'gender_not', alias?: string  } 
  | { name: 'gender_in', alias?: string  } 
  | { name: 'gender_not_in', alias?: string  } 
  | { name: 'gender_lt', alias?: string  } 
  | { name: 'gender_lte', alias?: string  } 
  | { name: 'gender_gt', alias?: string  } 
  | { name: 'gender_gte', alias?: string  } 
  | { name: 'gender_contains', alias?: string  } 
  | { name: 'gender_not_contains', alias?: string  } 
  | { name: 'gender_starts_with', alias?: string  } 
  | { name: 'gender_not_starts_with', alias?: string  } 
  | { name: 'gender_ends_with', alias?: string  } 
  | { name: 'gender_not_ends_with', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'level_not', alias?: string  } 
  | { name: 'level_in', alias?: string  } 
  | { name: 'level_not_in', alias?: string  } 
  | { name: 'level_lt', alias?: string  } 
  | { name: 'level_lte', alias?: string  } 
  | { name: 'level_gt', alias?: string  } 
  | { name: 'level_gte', alias?: string  } 
  | { name: 'level_contains', alias?: string  } 
  | { name: 'level_not_contains', alias?: string  } 
  | { name: 'level_starts_with', alias?: string  } 
  | { name: 'level_not_starts_with', alias?: string  } 
  | { name: 'level_ends_with', alias?: string  } 
  | { name: 'level_not_ends_with', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'phone_not', alias?: string  } 
  | { name: 'phone_in', alias?: string  } 
  | { name: 'phone_not_in', alias?: string  } 
  | { name: 'phone_lt', alias?: string  } 
  | { name: 'phone_lte', alias?: string  } 
  | { name: 'phone_gt', alias?: string  } 
  | { name: 'phone_gte', alias?: string  } 
  | { name: 'phone_contains', alias?: string  } 
  | { name: 'phone_not_contains', alias?: string  } 
  | { name: 'phone_starts_with', alias?: string  } 
  | { name: 'phone_not_starts_with', alias?: string  } 
  | { name: 'phone_ends_with', alias?: string  } 
  | { name: 'phone_not_ends_with', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'address_not', alias?: string  } 
  | { name: 'address_in', alias?: string  } 
  | { name: 'address_not_in', alias?: string  } 
  | { name: 'address_lt', alias?: string  } 
  | { name: 'address_lte', alias?: string  } 
  | { name: 'address_gt', alias?: string  } 
  | { name: 'address_gte', alias?: string  } 
  | { name: 'address_contains', alias?: string  } 
  | { name: 'address_not_contains', alias?: string  } 
  | { name: 'address_starts_with', alias?: string  } 
  | { name: 'address_not_starts_with', alias?: string  } 
  | { name: 'address_ends_with', alias?: string  } 
  | { name: 'address_not_ends_with', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'image_not', alias?: string  } 
  | { name: 'image_in', alias?: string  } 
  | { name: 'image_not_in', alias?: string  } 
  | { name: 'image_lt', alias?: string  } 
  | { name: 'image_lte', alias?: string  } 
  | { name: 'image_gt', alias?: string  } 
  | { name: 'image_gte', alias?: string  } 
  | { name: 'image_contains', alias?: string  } 
  | { name: 'image_not_contains', alias?: string  } 
  | { name: 'image_starts_with', alias?: string  } 
  | { name: 'image_not_starts_with', alias?: string  } 
  | { name: 'image_ends_with', alias?: string  } 
  | { name: 'image_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  name?: string | null
  email?: string | null
  regNo?: string | null
  gender?: string | null
  level?: string | null
  phone?: string | null
  address?: string | null
  image?: string | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'regNo', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'image', alias?: string  } 
  
export interface DepartmentUpsertWithWhereUniqueWithoutFacultyInput {
  where?: DepartmentWhereUniqueInput
  update?: DepartmentUpdateWithoutFacultyDataInput
  create?: DepartmentCreateWithoutFacultyInput
}
export type DepartmentUpsertWithWhereUniqueWithoutFacultyInputInputObject =
  | Extract<keyof DepartmentUpsertWithWhereUniqueWithoutFacultyInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DepartmentScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: DepartmentScalarWhereInput[]
  OR?: DepartmentScalarWhereInput[]
  NOT?: DepartmentScalarWhereInput[]
}
export type DepartmentScalarWhereInputInputObject =
  | Extract<keyof DepartmentScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DepartmentUpdateManyWithWhereNestedInput {
  where?: DepartmentScalarWhereInput
  data?: DepartmentUpdateManyDataInput
}
export type DepartmentUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof DepartmentUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DepartmentUpdateManyDataInput {
  name?: string | null
}
export type DepartmentUpdateManyDataInputInputObject =
  | Extract<keyof DepartmentUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface FacultyUpsertNestedInput {
  update?: FacultyUpdateDataInput
  create?: FacultyCreateInput
}
export type FacultyUpsertNestedInputInputObject =
  | Extract<keyof FacultyUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutCoursesInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutCoursesDataInput
  create?: UserCreateWithoutCoursesInput
}
export type UserUpsertWithWhereUniqueWithoutCoursesInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutCoursesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseUpsertWithWhereUniqueWithoutDepartmentInput {
  where?: CourseWhereUniqueInput
  update?: CourseUpdateWithoutDepartmentDataInput
  create?: CourseCreateWithoutDepartmentInput
}
export type CourseUpsertWithWhereUniqueWithoutDepartmentInputInputObject =
  | Extract<keyof CourseUpsertWithWhereUniqueWithoutDepartmentInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DepartmentUpsertWithoutStudentsInput {
  update?: DepartmentUpdateWithoutStudentsDataInput
  create?: DepartmentCreateWithoutStudentsInput
}
export type DepartmentUpsertWithoutStudentsInputInputObject =
  | Extract<keyof DepartmentUpsertWithoutStudentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  name?: string | null
  email?: string | null
  regNo?: string | null
  gender?: string | null
  level?: string | null
  phone?: string | null
  address?: string | null
  image?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'regNo', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'image', alias?: string  } 
  
export interface CourseCreateInput {
  id?: string | null
  name?: string
  department?: DepartmentCreateOneWithoutCoursesInput
  creditUnits?: number
  students?: UserCreateManyWithoutCoursesInput | null
  description?: string
  level?: string
}
export type CourseCreateInputInputObject =
  | Extract<keyof CourseCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'department', alias?: string  } 
  | { name: 'creditUnits', alias?: string  } 
  | { name: 'students', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'level', alias?: string  } 
  
export interface CourseUpdateInput {
  name?: string | null
  department?: DepartmentUpdateOneRequiredWithoutCoursesInput | null
  creditUnits?: number | null
  students?: UserUpdateManyWithoutCoursesInput | null
  description?: string | null
  level?: string | null
}
export type CourseUpdateInputInputObject =
  | Extract<keyof CourseUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'department', alias?: string  } 
  | { name: 'creditUnits', alias?: string  } 
  | { name: 'students', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'level', alias?: string  } 
  
export interface CourseUpdateManyMutationInput {
  name?: string | null
  creditUnits?: number | null
  description?: string | null
  level?: string | null
}
export type CourseUpdateManyMutationInputInputObject =
  | Extract<keyof CourseUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'creditUnits', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'level', alias?: string  } 
  
export interface FacultyUpdateInput {
  name?: string | null
  departments?: DepartmentUpdateManyWithoutFacultyInput | null
}
export type FacultyUpdateInputInputObject =
  | Extract<keyof FacultyUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'departments', alias?: string  } 
  
export interface FacultyUpdateManyMutationInput {
  name?: string | null
}
export type FacultyUpdateManyMutationInputInputObject =
  | Extract<keyof FacultyUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface DepartmentCreateInput {
  id?: string | null
  name?: string
  faculty?: FacultyCreateOneWithoutDepartmentsInput
  courses?: CourseCreateManyWithoutDepartmentInput | null
  students?: UserCreateManyWithoutDepartmentInput | null
}
export type DepartmentCreateInputInputObject =
  | Extract<keyof DepartmentCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'faculty', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'students', alias?: string  } 
  
export interface DepartmentUpdateInput {
  name?: string | null
  faculty?: FacultyUpdateOneRequiredWithoutDepartmentsInput | null
  courses?: CourseUpdateManyWithoutDepartmentInput | null
  students?: UserUpdateManyWithoutDepartmentInput | null
}
export type DepartmentUpdateInputInputObject =
  | Extract<keyof DepartmentUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'faculty', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'students', alias?: string  } 
  
export interface DepartmentUpdateManyMutationInput {
  name?: string | null
}
export type DepartmentUpdateManyMutationInputInputObject =
  | Extract<keyof DepartmentUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CourseSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CourseWhereInput | null
  AND?: CourseSubscriptionWhereInput[]
  OR?: CourseSubscriptionWhereInput[]
  NOT?: CourseSubscriptionWhereInput[]
}
export type CourseSubscriptionWhereInputInputObject =
  | Extract<keyof CourseSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FacultySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FacultyWhereInput | null
  AND?: FacultySubscriptionWhereInput[]
  OR?: FacultySubscriptionWhereInput[]
  NOT?: FacultySubscriptionWhereInput[]
}
export type FacultySubscriptionWhereInputInputObject =
  | Extract<keyof FacultySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DepartmentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: DepartmentWhereInput | null
  AND?: DepartmentSubscriptionWhereInput[]
  OR?: DepartmentSubscriptionWhereInput[]
  NOT?: DepartmentSubscriptionWhereInput[]
}
export type DepartmentSubscriptionWhereInputInputObject =
  | Extract<keyof DepartmentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type DepartmentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CourseOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'creditUnits_ASC'
  | 'creditUnits_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'level_ASC'
  | 'level_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'regNo_ASC'
  | 'regNo_DESC'
  | 'gender_ASC'
  | 'gender_DESC'
  | 'level_ASC'
  | 'level_DESC'
  | 'phone_ASC'
  | 'phone_DESC'
  | 'address_ASC'
  | 'address_DESC'
  | 'image_ASC'
  | 'image_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type FacultyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  